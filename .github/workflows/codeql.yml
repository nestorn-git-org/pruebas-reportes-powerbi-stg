name: Code Analysis

on:
  push:
    branches: [main, develop, 'hotfix/**', 'release/**']
    paths: ['src/**', 'config/**', 'scripts/**', 'test/**', 'requirements.txt']
  pull_request:
    branches: [develop, main]
    paths: ['src/**', 'config/**', 'scripts/**', 'test/**', 'requirements.txt']

jobs:
  detect-changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      powershell: ${{ steps.changes.outputs.powershell }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python:
              - 'scripts/*.py'
              - 'requirements.txt'              
              - 'scripts/pyproject.toml'
            powershell:
              - 'scripts/*.ps1'
              - 'scripts/*.psm1'
              - 'scripts/*.psd1'

  python-analysis:
    name: Python Analysis
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ always() && needs.detect-changes.outputs.python == 'true' }}
    
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: +security-and-quality

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-analysis-results
          path: |
            **/*.sarif
            **/codeql-results/

  powershell-analysis:
    name: PowerShell Analysis
    runs-on: windows-latest
    needs: detect-changes
    if: ${{ always() && needs.detect-changes.outputs.powershell == 'true' }}
    
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PowerShell
        uses: actions/setup-powershell@v1
        with:
          powershell-version: '7.3'

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          Install-Module -Name Pester -Force -Scope CurrentUser

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = @()
          # Only analyze in the scripts directory
          Get-ChildItem -Path "scripts" -Recurse -Include "*.ps1", "*.psm1", "*.psd1" | ForEach-Object {
            $analysis = Invoke-ScriptAnalyzer -Path $_.FullName -Severity Error,Warning,Information
            $results += $analysis
          }
          
          # Convert to SARIF format
          $sarif = @{
            version = "2.1.0"
            runs = @(
              @{
                tool = @{
                  driver = @{
                    name = "PSScriptAnalyzer"
                    version = (Get-Module PSScriptAnalyzer).Version.ToString()
                  }
                }
                results = @()
              }
            )
          }
          
          foreach ($result in $results) {
            $sarifResult = @{
              ruleId = $result.RuleName
              level = switch ($result.Severity) {
                "Error" { "error" }
                "Warning" { "warning" }
                "Information" { "note" }
              }
              message = @{ text = $result.Message }
              locations = @(
                @{
                  physicalLocation = @{
                    artifactLocation = @{
                      uri = $result.ScriptPath
                    }
                    region = @{
                      startLine = $result.Line
                      startColumn = $result.Column
                    }
                  }
                }
              )
            }
            $sarif.runs[0].results += $sarifResult
          }
          
          $sarif | ConvertTo-Json -Depth 10 | Out-File -FilePath "psscriptanalyzer-results.sarif"

      - name: Upload PSScriptAnalyzer SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: psscriptanalyzer-results.sarif
          category: "PSScriptAnalyzer"

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: powershell-analysis-results
          path: |
            **/*.sarif
            **/codeql-results/
